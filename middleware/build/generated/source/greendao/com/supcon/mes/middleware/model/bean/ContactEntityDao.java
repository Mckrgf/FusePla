package com.supcon.mes.middleware.model.bean;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_ENTITY".
*/
public class ContactEntityDao extends AbstractDao<ContactEntity, Long> {

    public static final String TABLENAME = "CONTACT_ENTITY";

    /**
     * Properties of entity ContactEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StaffId = new Property(0, Long.class, "staffId", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property PositionName = new Property(3, String.class, "positionName", false, "POSITION_NAME");
        public final static Property UserId = new Property(4, Long.class, "userId", false, "USER_ID");
        public final static Property CompanyId = new Property(5, long.class, "companyId", false, "COMPANY_ID");
        public final static Property DepartmentId = new Property(6, String.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property DepartmentCode = new Property(7, String.class, "departmentCode", false, "DEPARTMENT_CODE");
        public final static Property DepartmentName = new Property(8, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property FullPathName = new Property(9, String.class, "fullPathName", false, "FULL_PATH_NAME");
        public final static Property JobTitle = new Property(10, String.class, "jobTitle", false, "JOB_TITLE");
        public final static Property MneCode = new Property(11, String.class, "mneCode", false, "MNE_CODE");
        public final static Property PicturePath = new Property(12, String.class, "picturePath", false, "PICTURE_PATH");
        public final static Property Sex = new Property(13, String.class, "sex", false, "SEX");
        public final static Property Mobile = new Property(14, String.class, "mobile", false, "MOBILE");
        public final static Property Email = new Property(15, String.class, "email", false, "EMAIL");
        public final static Property Memo = new Property(16, String.class, "memo", false, "MEMO");
        public final static Property SearchPinyin = new Property(17, String.class, "searchPinyin", false, "SEARCH_PINYIN");
        public final static Property Sort = new Property(18, long.class, "sort", false, "SORT");
        public final static Property DocumentId = new Property(19, long.class, "documentId", false, "DOCUMENT_ID");
        public final static Property UpdateTime = new Property(20, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Ip = new Property(21, String.class, "ip", false, "IP");
    }

    private DaoSession daoSession;


    public ContactEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ContactEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: staffId
                "\"CODE\" TEXT," + // 1: code
                "\"NAME\" TEXT," + // 2: name
                "\"POSITION_NAME\" TEXT," + // 3: positionName
                "\"USER_ID\" INTEGER," + // 4: userId
                "\"COMPANY_ID\" INTEGER NOT NULL ," + // 5: companyId
                "\"DEPARTMENT_ID\" TEXT," + // 6: departmentId
                "\"DEPARTMENT_CODE\" TEXT," + // 7: departmentCode
                "\"DEPARTMENT_NAME\" TEXT," + // 8: departmentName
                "\"FULL_PATH_NAME\" TEXT," + // 9: fullPathName
                "\"JOB_TITLE\" TEXT," + // 10: jobTitle
                "\"MNE_CODE\" TEXT," + // 11: mneCode
                "\"PICTURE_PATH\" TEXT," + // 12: picturePath
                "\"SEX\" TEXT," + // 13: sex
                "\"MOBILE\" TEXT," + // 14: mobile
                "\"EMAIL\" TEXT," + // 15: email
                "\"MEMO\" TEXT," + // 16: memo
                "\"SEARCH_PINYIN\" TEXT," + // 17: searchPinyin
                "\"SORT\" INTEGER NOT NULL ," + // 18: sort
                "\"DOCUMENT_ID\" INTEGER NOT NULL ," + // 19: documentId
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 20: updateTime
                "\"IP\" TEXT);"); // 21: ip
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactEntity entity) {
        stmt.clearBindings();
 
        Long staffId = entity.getStaffId();
        if (staffId != null) {
            stmt.bindLong(1, staffId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String positionName = entity.getPositionName();
        if (positionName != null) {
            stmt.bindString(4, positionName);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
        stmt.bindLong(6, entity.getCompanyId());
 
        String departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindString(7, departmentId);
        }
 
        String departmentCode = entity.getDepartmentCode();
        if (departmentCode != null) {
            stmt.bindString(8, departmentCode);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(9, departmentName);
        }
 
        String fullPathName = entity.getFullPathName();
        if (fullPathName != null) {
            stmt.bindString(10, fullPathName);
        }
 
        String jobTitle = entity.getJobTitle();
        if (jobTitle != null) {
            stmt.bindString(11, jobTitle);
        }
 
        String mneCode = entity.getMneCode();
        if (mneCode != null) {
            stmt.bindString(12, mneCode);
        }
 
        String picturePath = entity.getPicturePath();
        if (picturePath != null) {
            stmt.bindString(13, picturePath);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(14, sex);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(15, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(16, email);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(17, memo);
        }
 
        String searchPinyin = entity.getSearchPinyin();
        if (searchPinyin != null) {
            stmt.bindString(18, searchPinyin);
        }
        stmt.bindLong(19, entity.getSort());
        stmt.bindLong(20, entity.getDocumentId());
        stmt.bindLong(21, entity.getUpdateTime());
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(22, ip);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactEntity entity) {
        stmt.clearBindings();
 
        Long staffId = entity.getStaffId();
        if (staffId != null) {
            stmt.bindLong(1, staffId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String positionName = entity.getPositionName();
        if (positionName != null) {
            stmt.bindString(4, positionName);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
        stmt.bindLong(6, entity.getCompanyId());
 
        String departmentId = entity.getDepartmentId();
        if (departmentId != null) {
            stmt.bindString(7, departmentId);
        }
 
        String departmentCode = entity.getDepartmentCode();
        if (departmentCode != null) {
            stmt.bindString(8, departmentCode);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(9, departmentName);
        }
 
        String fullPathName = entity.getFullPathName();
        if (fullPathName != null) {
            stmt.bindString(10, fullPathName);
        }
 
        String jobTitle = entity.getJobTitle();
        if (jobTitle != null) {
            stmt.bindString(11, jobTitle);
        }
 
        String mneCode = entity.getMneCode();
        if (mneCode != null) {
            stmt.bindString(12, mneCode);
        }
 
        String picturePath = entity.getPicturePath();
        if (picturePath != null) {
            stmt.bindString(13, picturePath);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(14, sex);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(15, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(16, email);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(17, memo);
        }
 
        String searchPinyin = entity.getSearchPinyin();
        if (searchPinyin != null) {
            stmt.bindString(18, searchPinyin);
        }
        stmt.bindLong(19, entity.getSort());
        stmt.bindLong(20, entity.getDocumentId());
        stmt.bindLong(21, entity.getUpdateTime());
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(22, ip);
        }
    }

    @Override
    protected final void attachEntity(ContactEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ContactEntity readEntity(Cursor cursor, int offset) {
        ContactEntity entity = new ContactEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // staffId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // positionName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // userId
            cursor.getLong(offset + 5), // companyId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // departmentId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // departmentCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // departmentName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fullPathName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // jobTitle
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mneCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // picturePath
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sex
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // mobile
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // email
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // memo
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // searchPinyin
            cursor.getLong(offset + 18), // sort
            cursor.getLong(offset + 19), // documentId
            cursor.getLong(offset + 20), // updateTime
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // ip
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactEntity entity, int offset) {
        entity.setStaffId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPositionName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCompanyId(cursor.getLong(offset + 5));
        entity.setDepartmentId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDepartmentCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDepartmentName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFullPathName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJobTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMneCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPicturePath(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSex(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMobile(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEmail(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMemo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSearchPinyin(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSort(cursor.getLong(offset + 18));
        entity.setDocumentId(cursor.getLong(offset + 19));
        entity.setUpdateTime(cursor.getLong(offset + 20));
        entity.setIp(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContactEntity entity, long rowId) {
        entity.setStaffId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContactEntity entity) {
        if(entity != null) {
            return entity.getStaffId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactEntity entity) {
        return entity.getStaffId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCompanyEntityDao().getAllColumns());
            builder.append(" FROM CONTACT_ENTITY T");
            builder.append(" LEFT JOIN COMPANY_ENTITY T0 ON T.\"COMPANY_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ContactEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        ContactEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CompanyEntity company = loadCurrentOther(daoSession.getCompanyEntityDao(), cursor, offset);
         if(company != null) {
            entity.setCompany(company);
        }

        return entity;    
    }

    public ContactEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ContactEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ContactEntity> list = new ArrayList<ContactEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ContactEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ContactEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
