package com.supcon.mes.middleware.model.bean;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPARTMENT_ENTITY".
*/
public class DepartmentEntityDao extends AbstractDao<DepartmentEntity, Long> {

    public static final String TABLENAME = "DEPARTMENT_ENTITY";

    /**
     * Properties of entity DepartmentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property SearchPinyin = new Property(3, String.class, "searchPinyin", false, "SEARCH_PINYIN");
        public final static Property LayRec = new Property(4, String.class, "layRec", false, "LAY_REC");
        public final static Property ParentId = new Property(5, Long.class, "parentId", false, "PARENT_ID");
        public final static Property Sort = new Property(6, int.class, "sort", false, "SORT");
        public final static Property Manager = new Property(7, String.class, "manager", false, "MANAGER");
        public final static Property FullPathName = new Property(8, String.class, "fullPathName", false, "FULL_PATH_NAME");
        public final static Property Cid = new Property(9, long.class, "cid", false, "CID");
    }

    private DaoSession daoSession;


    public DepartmentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPARTMENT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CODE\" TEXT," + // 2: code
                "\"SEARCH_PINYIN\" TEXT," + // 3: searchPinyin
                "\"LAY_REC\" TEXT," + // 4: layRec
                "\"PARENT_ID\" INTEGER," + // 5: parentId
                "\"SORT\" INTEGER NOT NULL ," + // 6: sort
                "\"MANAGER\" TEXT," + // 7: manager
                "\"FULL_PATH_NAME\" TEXT," + // 8: fullPathName
                "\"CID\" INTEGER NOT NULL );"); // 9: cid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPARTMENT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DepartmentEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String searchPinyin = entity.getSearchPinyin();
        if (searchPinyin != null) {
            stmt.bindString(4, searchPinyin);
        }
 
        String layRec = entity.getLayRec();
        if (layRec != null) {
            stmt.bindString(5, layRec);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(6, parentId);
        }
        stmt.bindLong(7, entity.getSort());
 
        String manager = entity.getManager();
        if (manager != null) {
            stmt.bindString(8, manager);
        }
 
        String fullPathName = entity.getFullPathName();
        if (fullPathName != null) {
            stmt.bindString(9, fullPathName);
        }
        stmt.bindLong(10, entity.getCid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DepartmentEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String searchPinyin = entity.getSearchPinyin();
        if (searchPinyin != null) {
            stmt.bindString(4, searchPinyin);
        }
 
        String layRec = entity.getLayRec();
        if (layRec != null) {
            stmt.bindString(5, layRec);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(6, parentId);
        }
        stmt.bindLong(7, entity.getSort());
 
        String manager = entity.getManager();
        if (manager != null) {
            stmt.bindString(8, manager);
        }
 
        String fullPathName = entity.getFullPathName();
        if (fullPathName != null) {
            stmt.bindString(9, fullPathName);
        }
        stmt.bindLong(10, entity.getCid());
    }

    @Override
    protected final void attachEntity(DepartmentEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DepartmentEntity readEntity(Cursor cursor, int offset) {
        DepartmentEntity entity = new DepartmentEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // searchPinyin
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // layRec
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // parentId
            cursor.getInt(offset + 6), // sort
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // manager
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fullPathName
            cursor.getLong(offset + 9) // cid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DepartmentEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSearchPinyin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLayRec(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setParentId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSort(cursor.getInt(offset + 6));
        entity.setManager(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFullPathName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCid(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DepartmentEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DepartmentEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DepartmentEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDepartmentEntityDao().getAllColumns());
            builder.append(" FROM DEPARTMENT_ENTITY T");
            builder.append(" LEFT JOIN DEPARTMENT_ENTITY T0 ON T.\"PARENT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DepartmentEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        DepartmentEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DepartmentEntity parentDepartment = loadCurrentOther(daoSession.getDepartmentEntityDao(), cursor, offset);
        entity.setParentDepartment(parentDepartment);

        return entity;    
    }

    public DepartmentEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DepartmentEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DepartmentEntity> list = new ArrayList<DepartmentEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DepartmentEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DepartmentEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
