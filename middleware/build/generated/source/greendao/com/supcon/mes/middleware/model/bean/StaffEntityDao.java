package com.supcon.mes.middleware.model.bean;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STAFF_ENTITY".
*/
public class StaffEntityDao extends AbstractDao<StaffEntity, Long> {

    public static final String TABLENAME = "STAFF_ENTITY";

    /**
     * Properties of entity StaffEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MainPosition = new Property(1, String.class, "mainPosition", false, "MAIN_POSITION");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Sort = new Property(3, int.class, "sort", false, "SORT");
        public final static Property Uuid = new Property(4, String.class, "uuid", false, "UUID");
        public final static Property MobilePhone = new Property(5, String.class, "mobilePhone", false, "MOBILE_PHONE");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Code = new Property(8, String.class, "code", false, "CODE");
        public final static Property Ip = new Property(9, String.class, "ip", false, "IP");
        public final static Property Department = new Property(10, Long.class, "department", false, "DEPARTMENT");
    }

    private DaoSession daoSession;


    public StaffEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StaffEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STAFF_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MAIN_POSITION\" TEXT," + // 1: mainPosition
                "\"NAME\" TEXT," + // 2: name
                "\"SORT\" INTEGER NOT NULL ," + // 3: sort
                "\"UUID\" TEXT," + // 4: uuid
                "\"MOBILE_PHONE\" TEXT," + // 5: mobilePhone
                "\"SEX\" TEXT," + // 6: sex
                "\"EMAIL\" TEXT," + // 7: email
                "\"CODE\" TEXT," + // 8: code
                "\"IP\" TEXT," + // 9: ip
                "\"DEPARTMENT\" INTEGER);"); // 10: department
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STAFF_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StaffEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mainPosition = entity.getMainPosition();
        if (mainPosition != null) {
            stmt.bindString(2, mainPosition);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getSort());
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(5, uuid);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(6, mobilePhone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(9, code);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(10, ip);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StaffEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mainPosition = entity.getMainPosition();
        if (mainPosition != null) {
            stmt.bindString(2, mainPosition);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getSort());
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(5, uuid);
        }
 
        String mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindString(6, mobilePhone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(9, code);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(10, ip);
        }
    }

    @Override
    protected final void attachEntity(StaffEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StaffEntity readEntity(Cursor cursor, int offset) {
        StaffEntity entity = new StaffEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mainPosition
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // sort
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // uuid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobilePhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // code
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // ip
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StaffEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMainPosition(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSort(cursor.getInt(offset + 3));
        entity.setUuid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobilePhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIp(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StaffEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StaffEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StaffEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDepartmentEntityDao().getAllColumns());
            builder.append(" FROM STAFF_ENTITY T");
            builder.append(" LEFT JOIN DEPARTMENT_ENTITY T0 ON T.\"DEPARTMENT\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected StaffEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        StaffEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DepartmentEntity department = loadCurrentOther(daoSession.getDepartmentEntityDao(), cursor, offset);
        entity.setDepartment(department);

        return entity;    
    }

    public StaffEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<StaffEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<StaffEntity> list = new ArrayList<StaffEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<StaffEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<StaffEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
